apply from: "$rootDir/functions.gradle"
apply from: "$rootDir/versions.gradle"
apply from: "$rootDir/configs.gradle"

buildscript {
    apply from: "$rootDir/functions.gradle"
    apply from: "$rootDir/versions.gradle"
    apply from: "$rootDir/configs.gradle"
    repositories {
        if (doWeHaveToUseArtifactory())
            maven { url(configs.artifactory) }
        else
            mavenCentral()
    }
    dependencies {
        if (doWeHaveToUseArtifactory())
            classpath(deps.jfrog)
        classpath(deps.springboot.gradle)
        classpath(deps.kotlin.gradle)
        classpath(deps.kotlin.allopen)
        classpath(deps.kotlin.noarg)
    }
}

apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "kotlin-jpa"
apply plugin: "eclipse"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

group = "org.ninrod.blog"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    if (doWeHaveToUseArtifactory())
        maven { url(configs.artifactory) }
    else
        mavenCentral()
}

test {
    useJUnitPlatform()
}

dependencies {
    compile(deps.springboot.starter)
    compile(deps.springboot.starter_web)
    compile(deps.kotlin.stdlib)
    compile(deps.kotlin.jackson)
    compile(deps.kotlin.reflect)
    compile(deps.postgre)
    testCompile(deps.springboot.starter_test) {
        exclude module: "junit"
    }
    testCompile(deps.junit.api)
    testRuntimeOnly(deps.junit.engine)
}

tasks.register("hello") {
    doLast {
        println("art: ${configs.artifactory}")
        println("kotlin: ${versions.kotlin}")
        println("temos que usar art? " + doWeHaveToUseArtifactory())
        println("rootdir: $rootDir")
    }
}
